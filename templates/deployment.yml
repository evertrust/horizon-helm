apiVersion: {{ if .Values.persistence.enabled }}{{ include "common.capabilities.statefulset.apiVersion" . }}{{- else }}{{ include "common.capabilities.deployment.apiVersion" . }}{{- end }}
kind: {{ if .Values.persistence.enabled }}StatefulSet{{- else }}Deployment{{- end }}
metadata:
  name: {{ template "common.names.fullname" . }}
  labels: {{- include "horizon.labels.standard" . | nindent 4 }}
  {{- if .Values.commonLabels }}
  {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if .Values.deploymentLabels }}
  {{- include "common.tplvalues.render" ( dict "value" .Values.deploymentLabels "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if or .Values.commonAnnotations .Values.deploymentAnnotations }}
  annotations: 
  {{- if .Values.deploymentAnnotations }}
  {{- include "common.tplvalues.render" ( dict "value" .Values.deploymentAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if .Values.commonAnnotations }}
  {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
  {{- end }}
spec:
  {{- if .Values.horizontalAutoscaler.enabled }}
  replicas: {{ .Values.horizontalAutoscaler.minReplicas }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  {{- if .Values.persistence.enabled }}
  updateStrategy: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" $ ) | nindent 4 }}
  {{- else }}
  strategy: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if .Values.persistence.enabled }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.persistence.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenScaled: {{ .Values.persistence.persistentVolumeClaimRetentionPolicy.whenScaled }}
  {{- range $k, $v := .Values.persistence.volumeClaimTemplates }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ $k }}
        {{- if $v.annotations }}
        annotations:
          {{- toYaml $v.annotations | nindent 10 }}
        {{- end }}
      spec:
        {{- if $v.storageClass }}
        {{- if (eq "-" $v.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ $v.storageClass }}
        {{- end }}
        {{- end }}
        accessModes:
          {{- toYaml $v.accessModes | nindent 10 }}
        resources:
          requests:
            storage: "{{ $v.size }}"
  {{- end }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "horizon.labels.standard" . | nindent 8 }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ tpl (.Files.Glob "config/*").AsConfig . | sha256sum }}
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "horizon.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: horizon
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /alive
              port: management
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /alive
              port: management
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /ready
              port: management
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- $shouldInjectHostname := true }}
            {{- range .Values.environment }}
            {{- if eq .name "HOSTNAME" }}
            {{- $shouldInjectHostname = false }}
            {{- end }}
            - name: {{ .name }}
            {{- if .value }}
              value: {{ .value | quote }}
            {{- end }}
            {{- if .valueFrom }}
              valueFrom: 
            {{- toYaml .valueFrom | nindent 16 }}
            {{- end }}
            {{- end }}
            {{- if $shouldInjectHostname }}
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            {{- end }}
            # Inject the actor system name from the Helm release name
            - name: AKKA_ACTOR_SYSTEM
              valueFrom:
                fieldRef:
                  fieldPath : metadata.labels['app.kubernetes.io/instance']
            - name: LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ required "You must specify a license secret" .Values.license.secretName }}
                  key: {{ required "You must specify a license secret" .Values.license.secretKey }}
            {{- if .Values.initialAdminHashPassword.enabled }}
            - name: HRZ_ADMIN_PWD_HASH
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.initialAdminHashPassword.secretName }}
                  key: {{ .Values.initialAdminHashPassword.secretKey }}
            {{- end }}
            - name: LOGGING_APPENDER
              value: {{ .Values.logFormat }}
            {{- if .Values.logback.pattern }}
            - name: LOGGING_PATTERN
              value: {{ .Values.logback.pattern | quote }}
            {{- end }}
            {{- if .Values.logback.level }}
            - name: LOGGING_LEVEL
              value: {{ .Values.logback.level | quote }}
            {{- end }}
            - name: LOGGING_LOGGERS
              value: {{ include "horizon.loggingLoggers" . | quote }}
            - name: MONGODB_URI
            {{- include "horizon.mongodbUri" (dict "context" .) | nindent 14 }}
            - name: APPLICATION_SECRET
            {{- include "horizon.appSecret" (dict "context" .) | nindent 14 }}
            {{- if .Values.mailer.host }}
            - name: SMTP_HOST
              value: {{ .Values.mailer.host | quote }}
            {{- end }}
            {{- if .Values.mailer.port }}
            - name: SMTP_PORT
              value: {{ .Values.mailer.port | quote }}
            {{- end }}
            {{- if or (not (kindIs "string" .Values.mailer.ssl)) (not (empty .Values.mailer.ssl)) }}
            - name: SMTP_SSL
              value: {{ .Values.mailer.ssl | quote }}
            {{- end }}
            {{- if or (not (kindIs "string" .Values.mailer.tls)) (not (empty .Values.mailer.tls)) }}
            - name: SMTP_TLS
              value: {{ .Values.mailer.tls | quote }}
            {{- end }}
            {{- if .Values.mailer.user }}
            - name: SMTP_USER
              value: {{ .Values.mailer.user | quote }}
            {{- end }}
            {{- if .Values.mailer.password }}
            - name: SMTP_PASSWORD {{- include "common.tplvalues.render" (dict "value" .Values.mailer.password "context" $) | nindent 14 }}
            {{- end }}
            {{- if eq (include "horizon.shouldEnableClientCertificateAuth" .) "true" }}
            - name: HTTP_CERTIFICATE_HEADER
              value: {{ include "horizon.clientCertificateHeader" (dict "context" $) | quote }}
            {{- end }}
            - name: EVENT_CHAINSIGN
              value: {{ .Values.events.chainsign | quote }}
            {{- if .Values.events.ttl }}
            - name: EVENT_TTL
              value: {{ .Values.events.ttl }}
            {{- end }}
            {{- if .Values.events.discoveryTtl }}
            - name: EVENT_DISCOVERY_TTL
              value: {{ .Values.events.discoveryTtl }}
            {{- end }}
            {{- if .Values.events.chainsign }}
            - name: EVENT_SEAL_SECRET
            {{- include "horizon.eventSealSecret" (dict "context" .) | nindent 14 }}
            {{- end }}
            {{- range $key, $value := (include "horizon.allowedHosts" $ | fromJsonArray) }}
            - name: HOSTS_ALLOWED.{{ $key }}
              value: {{ $value }}
            {{- end }}
            - name: VAULT_TYPE
              value: {{ .Values.defaultVault.type | quote }}
            {{- if .Values.defaultVault.masterKeyURI }}
            - name: VAULT_TINK_MASTER_KEY_URI 
              value: {{ .Values.defaultVault.masterKeyURI | quote }}
            {{- end }}
            {{- if hasKey .Values.defaultVault "keyset" }}
            - name: KEYSET
              valueFrom:
                secretKeyRef:
                  name: {{ required "You must specify a keyset secret" .Values.defaultVault.keyset.secretName }}
                  key: {{ required "You must specify a keyset secret" .Values.defaultVault.keyset.secretKey }}
            {{- end }}
            {{- if .Values.analytics.enabled }}
            - name: ANALYTICS
              value: "true"
            - name: ANALYTICS_URL
              {{- if .Values.persistence.enabled }}
              value: {{ printf "jdbc:duckdb:%s/analytics.db" (clean .Values.persistence.volumeClaimTemplates.analytics.mountPath) | quote }}
              {{- else }}
              value: "jdbc:duckdb:/opt/horizon/var/analytics.db"
              {{- end }}
            {{- end }}
          volumeMounts:
            {{- if .Values.analytics.enabled }}
            - name: analytics
              {{- if .Values.persistence.enabled }}
              mountPath: {{ .Values.persistence.volumeClaimTemplates.analytics.mountPath }}
              {{- else }}
              mountPath: "/opt/horizon/var"
              {{- end }}
            {{- end }}
            - name: config
              mountPath: /opt/horizon/etc
            {{- if .Values.tls.secretName }}
            - name: tls-cert
              mountPath: /opt/horizon/ssl/cert.p12
              subPath: {{ .Values.tls.secretKey }}
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 9000
            - name: https
              containerPort: 9443
            - name: metrics
              containerPort: 9095
            - name: management
              containerPort: 7626
            - name: artery
              containerPort: 25520
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      {{- include "common.images.renderPullSecrets" (dict "images" (list .Values.image) "context" $) | nindent 6 }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.dnsConfig "context" $) | nindent 12 }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy | quote }}
      {{- end }}
      volumes:
        {{- if and (not .Values.persistence.enabled) .Values.analytics.enabled }}
        - name: analytics
          emptyDir: {}
        {{- end }}
        - name: config
          configMap:
            name: {{ printf "%s-config" (include "common.names.fullname" $) }}
        {{- if .Values.tls.secretName }}
        - name: tls-cert
          secret:
            secretName: {{ .Values.tls.secretName }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
